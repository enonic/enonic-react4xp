project.ext.react4xp = {}
file("react4xp.properties").withReader { reader ->
  project.ext.react4xp = new Properties()
  project.ext.react4xp.load(reader)
}


project.ext.BUILD_ENV='production';
if (
  project.hasProperty('dev')
  || project.hasProperty('development')
) {
  project.ext.BUILD_ENV='development';
}


// Used in ./npmInstall.gradle
if (project.hasProperty("link") || project.hasProperty("linked") || project.ext.react4xp.BUILD_ENV == "development") {
  project.ext.react4xp.NPMLINKED = true
}


project.ext.VERBOSE = 'false';
if (gradle.startParameter.logLevel == LogLevel.INFO) {
  project.ext.VERBOSE = 'true';
}


task react4xpComponents(type: NpmTask) {
  group 'React4xp'
  description 'Compile the parent projects react components'
  args = [
    'explore', '@enonic/react4xp', '--',
    'npm', 'run', 'webpack:components', '--',
    '--env', 'DIR_PATH_ABSOLUTE_PROJECT=' + project.projectDir,
    '--env', 'BUILD_ENV=' + project.ext.BUILD_ENV,
    '--env', 'VERBOSE=' + project.ext.VERBOSE
  ]
}
jar.dependsOn += "react4xpComponents"


task react4xpExternals(type: NpmTask) {
  group 'React4xp'
  description 'Compile the externals (react and react-dom)'
  args = [
    'explore', '@enonic/react4xp', '--',
    'npm', 'run', 'webpack:externals', '--',
    '--env', 'DIR_PATH_ABSOLUTE_PROJECT=' + project.projectDir,
    '--env', 'BUILD_ENV=' + project.ext.BUILD_ENV,
    '--env', 'VERBOSE=' + project.ext.VERBOSE
  ]
}
jar.dependsOn += 'react4xpExternals'


task react4xpNashornPolyfills(type: NpmTask) {
  group 'React4xp'
  description 'Run the imported react4xp webpack scripts that compile the components and externals (as well as nashorn polyfills if needed)'
  args = [
    'explore', '@enonic/react4xp', '--',
    'npm', 'run', 'webpack:nashornPolyfills', '--',
    '--env', 'DIR_PATH_ABSOLUTE_PROJECT=' + project.projectDir,
    '--env', 'BUILD_ENV=' + project.ext.BUILD_ENV,
    '--env', 'VERBOSE=' + project.ext.VERBOSE
  ]
}
jar.dependsOn += 'react4xpNashornPolyfills'
